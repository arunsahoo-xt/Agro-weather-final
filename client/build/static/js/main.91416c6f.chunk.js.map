{"version":3,"sources":["component/stats/NdviTable.js","component/AllStats.js","component/loginss/Loading.js","assets/farmlogo1.png","component/Navbar.js","component/GraphicalData/CurrentWeather.js","component/GraphicalData/AllWeatherDataLinks.js","component/AllPolygonData.js","component/Polygon copy.js","component/Weather.js","component/loginss/ErrorMessage.js","component/ShowMap.js","component/loginss/Login.js","component/loginss/Contact.js","component/loginss/RegisterScreen.js","component/GraphicalData/FiveDaysForecast.js","component/loginss/About.js","component/Farmnotes.js","component/Information.js","assets/img1.png","assets/img2.png","assets/img3.png","component/NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["NdviTable","idd","sendStats","imageLink","view","React","useState","latitude","longitude","zoom","setViewport","viewtile","setViewtile","useEffect","console","log","className","scope","Math","round","max","min","mean","median","p25","p75","std","style","backgroundImage","CustomTooltip","active","payload","label","color","Max","Mean","Min","AllStats","allstatsInfo","allImageInfo","polyid","afterToday","DateRangePicker","statsInfo","setStatsInfo","imageInfo","setImageInfo","imageInfo2","setImageInfo2","statsInfo2","setStatsInfo2","loadingData","setLoadingData","NaN","ndvihistory","setNdvihistory","idInfo","setIdInfo","apidata","imageData","polyId","ndvi","evi","evi2","nri","dswi","ndwi","link","id","fetchLinks","fetchImageLinks","passid2","elelink","eleid","a","fetch","ndviResponse2","json","allData2","passid1","imageResponse","blob","imageLinkData","imageObjectURL","URL","createObjectURL","fetchData","ele","map","ele2","ele1","changeDate","value","date1","floor","getTime","date2","ndviurl","res","data","wedata","Date","dt","getHours","toISOString","substr","toString","toFixed","reverse","height","class","DropdownButton","title","Dropdown","Item","as","onClick","CustomProvider","theme","showOneCalendar","disabledDate","block","placeholder","ranges","onOk","LineChart","width","margin","top","right","left","bottom","CartesianGrid","opacity","vertical","XAxis","dataKey","YAxis","type","domain","Tooltip","content","Legend","iconType","Line","stroke","Loading","size","display","justifyContent","alignItems","Spinner","animation","Navbar","href","src","logo","alt","to","localStorage","removeItem","CurrentWeather","apikey","weatherData","setWeatherData","soilData","setSoilData","setLoading","getWeatherdata","getSoilData","url","main","temp_max","temp_min","temp","humidity","pressure","wind","speed","weather","description","clouds","all","emoji","Time","Temp","WDescp","MinTemp","MaxTemp","t0","t10","moisture","Humidity","WindSpeed","AllWeatherDataLinks","customforecastData","setCustomForecastData","custom5forecastData","setCustom5ForecastData","loading","getWeatherData","response","Error","tm","dtt","wedata2","filter","FilterTime","Placeholder","Graph","AreaChart","x1","y1","x2","y2","offset","stopColor","stopOpacity","xAxisId","tickLine","axisLine","minTickGap","orientation","tickFormatter","number","tickCount","strokeDasharray","Area","fillOpacity","fill","BarChart","Bar","AllPolygonData","polyData","open","setOpen","sortColumn","setSortColumn","sortType","setSortType","navigate","useNavigate","maxWidth","Table","sort","b","x","y","charCodeAt","onSortColumn","setTimeout","onRowClick","_id","Column","flexGrow","align","sortable","HeaderCell","Cell","rowData","handleAction","polygon_id","userInfo","JSON","parse","getItem","method","headers","body","stringify","status","message","setItem","Modal","onClose","Header","Title","Body","Footer","Polygon","allInfo","viewport","viewPoly","setViewPoly","polyInfo","setPolyInfo","setPolyId","ndviloadingData","setNdviLoadingData","isvisible","setvisibility","viewPort","cord","geo_json","geometry","coordinates","lng","lat","location","parseFloat","formattedGeoData","apply","vPort","WebMercatorViewport","fitBounds","padding","polygonCoordinates","ndviStats","currentDate","minus20days","ndviurl1","ndviResponse1","allData","image","stats","getPolygonInfo","cordarray","minCoords","maxCoords","changevisibility","closeNav","document","getElementById","marginLeft","appearance","Button","mapStyle","accessToken","onViewportChange","viewportChangeMethod","position","source","paint","newallFunctionCall","name","statspage","Paragraph","marginTop","rows","forecastpage","polypage","Weather","pdata","setPdata","length","toast","info","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","toastmessage","ErrorMessage","variant","children","Notification","closable","header","toaster","push","placement","Map","ReactMapboxGl","ShowMap","mapCord","setMapCord","stringifyDataMap","create_poly","name1","polyName","body1","area","created_at","response1","data1","update","render","isLoading","containerStyle","displayControlsDefault","controls","trash","polygon","onDrawCreate","features","dataMap","onDrawUpdate","Login","email","setMail","password","setPassword","error","userLogin","e","preventDefault","config","axios","post","Form","onSubmit","Group","controlId","Label","Control","onChange","target","Row","Contact","RegisterScreen","user","setUser","handleInputs","postData","Text","FiveDaysForecast","setForecastData","About","rowKey","ExpandCell","expandedRowKeys","props","IconButton","icon","some","key","renderRowExpanded","note","created_on","Farmnotes","setExpandedRowKeys","setNote","noteData","setNoteData","getNotes","notes","addnote","nextExpandedRowKeys","forEach","Information","NotFound","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.91416c6f.chunk.js","sourcesContent":["import MapGL, { Layer, Source } from '@urbica/react-map-gl';\r\nimport React from 'react';\r\nimport { Figure } from 'react-bootstrap';\r\nimport { Legend, PolarAngleAxis, PolarGrid, PolarRadiusAxis, Radar, RadarChart, RadialBar, RadialBarChart, ResponsiveContainer, Tooltip } from 'recharts';\r\nimport StatsImage from '../StatsImage';\r\n//import { MDBDataTable } from 'mdbreact';\r\nimport \"./ndvi.css\";\r\nconst NdviTable = ({ idd, sendStats, imageLink, view }) => {\r\n\r\n  const [viewport, setViewport] = React.useState({\r\n    latitude: 0,\r\n    longitude: 0,\r\n    zoom: 1,\r\n  });\r\n  const [viewtile, setViewtile] = React.useState('http://api.agromonitoring.com/tile/1.0/{z}/{x}/{y}/04061e20e80/62337cb1192b99104b61bbd6?appid=1f0c9dbc13546bee076b99c95c97aa4c');\r\n  React.useEffect(() => {\r\n    setViewport(view);\r\n    setViewtile(imageLink);\r\n\r\n  }, [view, imageLink])\r\n\r\n\r\n  console.log(sendStats);\r\n  console.log(imageLink);\r\n\r\n  return (\r\n    < div>\r\n      <div className=\"container mt-3 bg-transparent\">\r\n        <div className=\"row justify-content-between\">\r\n          <div className=\"col-md-4 darkbg \">\r\n\r\n            {/* {\r\n        ndviInfo.map((sendStats)=>{    \r\n            let date=new Date(sendStats.dt*1000);\r\n            var time=`${date.getHours()}:${date.getMinutes()}`\r\n            var time1=`${date.getDate()}/${date.getMonth()}/${date.getFullYear()}`\r\n            return(\r\n                \r\n        //   <div key={ele.id}><button onClick={()=> passid(`${ele.id}`)}>{ele.id}</button></div>);\r\n        <div className=\"scrollable\">\r\n        Time:{time} <br></br>   \r\n        Date: {time1} */}\r\n\r\n\r\n            <table className=\"table \" >\r\n              <thead>\r\n                <tr className='bg-primary text-white '>\r\n                  <th scope='col'>{idd}</th>\r\n                  <th scope='col'>STATS</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className='text-white align-items-center '>\r\n                <tr >\r\n                  <th scope='row'>Max</th>\r\n                  <td>{Math.round(sendStats.max * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n                <tr >\r\n                  <th scope='row'>Min</th>\r\n                  <td>{Math.round(sendStats.min * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n                <tr >\r\n                  <th scope='row'>Mean</th>\r\n                  <td>{Math.round(sendStats.mean * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n                <tr >\r\n                  <th scope='row'>Median</th>\r\n                  <td>{Math.round(sendStats.median * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n                <tr >\r\n                  <th scope='row'>P25</th>\r\n                  <td>{Math.round(sendStats.p25 * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n                <tr >\r\n                  <th scope='row'>P75</th>\r\n                  <td>{Math.round(sendStats.p75 * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n                <tr >\r\n                  <th scope='row'>STD</th>\r\n                  <td>{Math.round(sendStats.std * 1000) / 1000}</td>\r\n\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"col-md-6 darkbg \">\r\n\r\n            <div className='card darkbg p-2 h-100'>\r\n              <div className='card-body  p-5 bg-dark hidescroll table tile' style={{ backgroundImage: `url(${viewtile})` }}> </div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NdviTable;\r\n","import React from 'react'\r\n\r\nimport NdviTable from './stats/NdviTable';\r\nimport { Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { CustomProvider, DateRangePicker } from 'rsuite';\r\n\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from 'recharts';\r\n\r\nconst AllStats = ({ allstatsInfo, allImageInfo, polyid,view }) => {\r\n  const {afterToday} = DateRangePicker;\r\n  const [statsInfo, setStatsInfo] = React.useState([]);\r\n  const [imageInfo, setImageInfo] = React.useState([]);\r\n  const [imageInfo2, setImageInfo2] = React.useState('');\r\n  const [statsInfo2, setStatsInfo2] = React.useState({});\r\n  const [loadingData, setLoadingData] = React.useState(false);\r\n  const [ndvihistory, setNdvihistory] = React.useState([ \r\n    {\r\n  \"Date\":NaN,\r\n  \"Max\":NaN,\r\n  \"Min\":NaN,\r\n  \"Mean\":NaN\r\n}]);\r\n\r\n  const [idInfo, setIdInfo] = React.useState(\"Satellite\");\r\n  var newStatsInfo;\r\n  var newImageInfo;\r\n  const apidata = allstatsInfo;\r\n  // console.log(allImageInfo);\r\n  const imageData = allImageInfo;\r\n  const polyId = polyid;\r\n  const apikey = \"1f0c9dbc13546bee076b99c95c97aa4c\";\r\n  const fetchLinks = () => {\r\n\r\n    const { ndvi, evi, evi2, nri, dswi, ndwi } = apidata;\r\n    console.log(apidata);\r\n    newStatsInfo = [\r\n      { link: ndvi, id: \"NDVI\" }, { link: evi, id: \"EVI\" }, { link: evi2, id: \"EVI2\" }, { link: nri, id: \"NRI\" }, { link: dswi, id: \"DSWI\" }, { link: ndwi, id: \"NDWI\" }\r\n    ];\r\n    setStatsInfo(newStatsInfo);\r\n    console.log(statsInfo)\r\n    setLoadingData(true);\r\n  }\r\n\r\n\r\n  const fetchImageLinks = () => {\r\n    const { ndvi, evi, evi2, nri, dswi, ndwi } = imageData;\r\n    console.log(imageData);\r\n    newImageInfo = [\r\n      { link: ndvi, id: \"NDVI\" }, { link: evi, id: \"EVI\" }, { link: evi2, id: \"EVI2\" }, { link: nri, id: \"NRI\" }, { link: dswi, id: \"DSWI\" }, { link: ndwi, id: \"NDWI\" }\r\n    ];\r\n    setImageInfo(newImageInfo);\r\n    console.log(imageInfo)\r\n    setLoadingData(true);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    fetchLinks();\r\n    fetchImageLinks();\r\n    \r\n  }, []);\r\n  React.useEffect(() => {\r\n  console.log(ndvihistory);    \r\n  }, [ndvihistory]);\r\n\r\n  // const apirender=()=>{\r\n\r\n  //         console.log(newStatsInfo);\r\n  //         // setStatsInfo(newStatsInfo);\r\n  //         console.log(statsInfo2);\r\n  // }\r\n\r\n  const passid2 = async (elelink, eleid) => {\r\n    try {\r\n      console.log(elelink);\r\n\r\n      const ndviResponse2 = await fetch(elelink);\r\n      const allData2 = await ndviResponse2.json();\r\n      console.log(allData2);\r\n      setStatsInfo2(allData2);\r\n      setIdInfo(eleid);\r\n\r\n\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const passid1 = async (elelink) => {\r\n    try {\r\n      console.log(elelink);\r\n\r\n      const imageResponse = await fetch(elelink);\r\n      console.log(imageResponse);\r\n      const imageLinkData = await imageResponse.blob();\r\n      const imageObjectURL = URL.createObjectURL(imageLinkData);\r\n      // const imageLinkData = await imageResponse.json();\r\n      // const imageObjectURL = URL.createObjectURL(imageLinkData);\r\n      console.log(imageObjectURL);\r\n      setImageInfo2(imageObjectURL);\r\n      // setIdInfo(eleid);\r\n\r\n\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  const fetchData = (ele) => {\r\n\r\n    statsInfo.map((ele2) => {\r\n      if (ele2.id == ele) {\r\n        console.log(ele2);\r\n        passid2(ele2.link, ele2.id);\r\n      }\r\n    })\r\n\r\n    imageInfo.map((ele1) => {\r\n\r\n      if (ele1.id == ele) {\r\n        passid1(ele1.link);\r\n\r\n      }\r\n    })\r\n  }\r\n\r\n  const changeDate = async (value) => {\r\n    var date1 = Math.floor(value[0].getTime() / 1000.0);\r\n    var date2 = Math.floor(value[1].getTime() / 1000.0);\r\n    console.log(date1 + \"-->>\" + date2);\r\n\r\n    try {\r\n      let ndviurl = `https://api.agromonitoring.com/agro/1.0/ndvi/history?polyid=${polyId}&start=${date1}&end=${date2}&appid=${apikey}`\r\n      const res = await fetch(ndviurl);\r\n      const data = await res.json();\r\n      console.log(data);\r\n\r\n\r\n      var wedata= data.map((ele) => {\r\n        var tm=new Date(ele.dt * 1000).getHours();\r\n        var dt=new Date(ele.dt * 1000).toISOString().substr(0,10);\r\n        var dtt=new Date(ele.dt * 1000).toString().substr(0,15);\r\n      var obj={\r\n        \"Date\":dtt,\r\n        \"Max\":ele.data.max.toFixed(2),\r\n        \"Min\":ele.data.min.toFixed(2),\r\n        \"Mean\":ele.data.mean.toFixed(2),\r\n      }\r\n          return (\r\n               obj\r\n              );\r\n          }).reverse();\r\n          console.log(wedata);\r\n         setNdvihistory(wedata);\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n       <div className='container-fluid my-3 ' style={{height:\"auto\"}}>\r\n       <div class=\"row \">\r\n       <div class=\"col-md my-1 \">\r\n       <div class=\"card text-white text-center darkbg\">\r\n       <div class=\"card-body  \">\r\n\r\n      <DropdownButton id=\"dropdown-item-button\" title=\"Choose Stats\">\r\n        <Dropdown.Item as=\"button\" onClick={() => fetchData(\"NDVI\")}>NDVI</Dropdown.Item>\r\n        <Dropdown.Item as=\"button\" onClick={() => fetchData(\"EVI\")}>EVI</Dropdown.Item>\r\n        <Dropdown.Item as=\"button\" onClick={() => fetchData(\"EVI2\")}>EVI2</Dropdown.Item>\r\n        <Dropdown.Item as=\"button\" onClick={() => fetchData(\"NRI\")}>NRI</Dropdown.Item>\r\n        <Dropdown.Item as=\"button\" onClick={() => fetchData(\"DSWI\")}>DSWI</Dropdown.Item>\r\n        <Dropdown.Item as=\"button\" onClick={() => fetchData(\"NDWI\")}>NDWI</Dropdown.Item>\r\n       \r\n      </DropdownButton>\r\n      {loadingData && <NdviTable sendStats={statsInfo2} idd={idInfo} imageLink={imageInfo2} view={view} />}\r\n\r\n      </div></div></div></div>\r\n      <div>\r\n      <CustomProvider theme=\"dark\">\r\n      <DateRangePicker showOneCalendar disabledDate={afterToday()} block placeholder=\"Select Date Range To Get Data And Please Wait Till It Fetches\" ranges={[]} onOk={(value) => changeDate(value)} />\r\n      </CustomProvider>\r\n      </div>\r\n      <div>\r\n     \r\n      <div className='card overflow-auto darkbg' style={{height:\"auto\"}}>\r\n        <div className=\"card-body\">\r\n        <h2 className='lead'>NDVI History</h2>   \r\n      <LineChart width={1300} height={400} data={ndvihistory}\r\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n           <CartesianGrid opacity={0.2} vertical={false} />\r\n       \r\n        <XAxis dataKey=\"Date\" />\r\n        <YAxis type=\"number\" domain={[-1,1]}/>\r\n        <Tooltip content={<CustomTooltip/>} />\r\n        <Legend iconType={'square'} />\r\n        \r\n        <Line type=\"monotone\" dataKey=\"Max\" stroke=\"#ff4200\" />\r\n        <Line type=\"monotone\" dataKey=\"Mean\" stroke=\"#02ee5a\" />\r\n        <Line type=\"monotone\" dataKey=\"Min\" stroke=\"#5b18f0\" />\r\n      </LineChart>\r\n      \r\n      </div>   \r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nfunction CustomTooltip({active,payload,label}){\r\n  if(active){\r\n    return (\r\n      <div className='box p-2' style={{color:\"white\"}}>\r\n        <h6>{label}</h6>\r\n        <p>Max:{payload[0].payload.Max}&deg;C</p>\r\n        <p>Mean:{payload[0].payload.Mean}&deg;C</p>\r\n        <p>Min:{payload[0].payload.Min}&deg;C</p>\r\n       \r\n      </div>\r\n    )\r\n  }\r\n  else return null\r\n  }\r\nexport default AllStats\r\n","import {Spinner} from 'react-bootstrap';\r\n\r\nconst Loading = ({size=50}) => {\r\n  return (\r\n    <div\r\n    style={{\r\n        display:\"flex\",\r\n        justifyContent:\"center\",\r\n        alignItems:\"center\",\r\n        width:\"100%\",\r\n        height:\"100%\"\r\n    }}\r\n    >\r\n        <Spinner\r\n        style={{\r\n            width:size,\r\n            height:size,\r\n            color:'skyblue'\r\n        }}\r\n        animation=\"border\"/>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Loading","export default __webpack_public_path__ + \"static/media/farmlogo1.d1f8e1dd.png\";","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport logo from '../assets/farmlogo1.png';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-transparent font-monospace h6 font-weight-bold\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n    <img src={logo} width={40} alt=\"\" className=\"logo\"/>\r\n    AgroWeather\r\n  </a>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n    <div className=\"navbar-nav ml-auto\">\r\n    {/* <Link className=\"nav-item nav-link \" to=\"/registerScreen\">Register <span className=\"sr-only\">(current)</span></Link> */}\r\n    {/* <Link className=\"nav-item nav-link\" to=\"/login\">Login</Link> */}\r\n      <Link className=\"nav-item nav-link\" to=\"/\">Home </Link>\r\n      <Link className=\"nav-item nav-link\" to=\"/notfound\">About</Link>\r\n      <Link className=\"nav-item nav-link\" to=\"/notfound\">Contact</Link>\r\n      <Link className=\"nav-item nav-link\" to=\"/notfound\">Help</Link>\r\n      <Link className=\"nav-item nav-link\" to=\"/login\" onClick={()=>{localStorage.removeItem(\"userInfo\");}}>LogOut</Link>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\n\r\nconst CurrentWeather = ({polyid}) => {\r\n    const apikey = \"1f0c9dbc13546bee076b99c95c97aa4c\";\r\n    const polyId=polyid;\r\n    const [weatherData,setWeatherData]=React.useState({\r\n      \"Time\":NaN,\r\n      \"MaxTemp\":NaN,\r\n      \"MinTemp\":NaN,\r\n      \"Temp\":NaN,\r\n      \"Humidity\":NaN,\r\n      \"Pressure\":NaN,\r\n      \"WindSpeed\":NaN,\r\n      \"WDescp\":NaN,\r\n      \"clouds\":NaN, \r\n      \"emoji\":NaN\r\n    });\r\n    const [soilData,setSoilData]=React.useState({});\r\n    const [isLoading,setLoading]=React.useState(true);\r\n    React.useEffect(() => {\r\n     getWeatherdata();\r\n     getSoilData();\r\n    }, [polyId])\r\n    \r\n\r\n    const getWeatherdata=async()=>{\r\n        setLoading(true);\r\n        try{\r\n        const url=`https://api.agromonitoring.com/agro/1.0/weather?polyid=${polyId}&units=metric&appid=${apikey}`\r\n        const res=await fetch(url);\r\n        const data=await res.json();\r\n        console.log(data);\r\n        \r\n          var wedata={\r\n            \"Time\":new Date(data.dt * 1000).toString().substr(0,21),\r\n            \"MaxTemp\":data.main.temp_max,\r\n            \"MinTemp\":data.main.temp_min,\r\n            \"Temp\":data.main.temp,\r\n            \"Humidity\":data.main.humidity,\r\n            \"Pressure\":data.main.pressure+\"hPa\",\r\n            \"WindSpeed\":data.wind.speed,\r\n            \"WDescp\":data.weather[0].description,\r\n            \"clouds\":data.clouds.all, \r\n            \"emoji\":data.weather[0].main\r\n          }\r\n        setWeatherData(wedata);\r\n        \r\n        setLoading(false);\r\n        }\r\n        catch(err){\r\n          console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    const getSoilData=async()=>{\r\n        setLoading(true);\r\n        const url=`http://api.agromonitoring.com/agro/1.0/soil?polyid=${polyId}&appid=${apikey}`\r\n        const res=await fetch(url);\r\n        const data=await res.json();\r\n        console.log(data);\r\n        setSoilData(data);\r\n        \r\n        setLoading(false);\r\n    }\r\n    let emoji=null;\r\n    if(typeof weatherData.emoji!='undefined'){\r\n        if(weatherData.emoji==\"Clouds\"){emoji=\"fa-cloud\"}\r\n        else  if(weatherData.emoji==\"Clear\"){emoji=\"fa-sun\"}\r\n        else if(weatherData.emoji==\"Thunderstorm\"){emoji=\"fa-bolt\"}\r\n        else if(weatherData.emoji==\"Drizzle\"){emoji=\"fa-cloud-rain\"}\r\n        else if(weatherData.emoji==\"Rain\"){emoji=\"fa-cloud-showers-heavy\"}\r\n        else if(weatherData.emoji==\"Snow\"){emoji=\"fa-snow-flake\"}\r\n        else {emoji=\"fa-smog\"}\r\n    }\r\n    else{\r\n        // return(<div>....Loading</div>)\r\n    }\r\n   \r\n    \r\n  return (\r\n    <div>\r\n        {/* {!isLoading && <div>\r\n            <div><h3>Time:{weatherData.Time}</h3></div>\r\n    <div><h1>Temperature:{weatherData.Temp}&deg;C</h1></div>\r\n    <div><h1>Min Temperature:{weatherData.MinTemp}&deg;C</h1></div>\r\n    <div><h1>Max Temperature:{weatherData.MaxTemp}&deg;C</h1></div>\r\n    </div> \r\n    }{!isLoading &&\r\n    <div>\r\n        <h3>Time:{new Date(soilData.dt * 1000).toString().substr(0,21)}</h3>\r\n<h3>Surface temperature, Celsius:{(soilData.t0-273.15).toFixed(2)}</h3>\r\n<h3>Temperature on the 10 centimeters depth, Celsius:{(soilData.t10-273.15).toFixed(2)}</h3>\r\n<h3>Soil moisture, m3/m3:{soilData.moisture}</h3>\r\n    </div>\r\n        } */}\r\n        <div className='container my-5'>\r\n        <div class=\"row justify-content-center\">\r\n  <div class=\"col-md-6 my-1 \">\r\n    <div class=\"card text-white text-center darkbg\">\r\n      <div class=\"card-body  \">\r\n          <div className='bg-dark bg-opacity-50 p-3'>\r\n        <h5 class=\"card-title\">Current Weather</h5>\r\n        <p class=\"card-text lead \">{weatherData.Time}</p><hr/>\r\n        <i className={`fas ${emoji} fa-4x`}></i>\r\n        <h1 className='fw-bolder mb-5'>{weatherData.Temp}&deg;C</h1>\r\n        <p className='lead fw-bolder mb-0'>{weatherData.WDescp}</p>\r\n        <p class=\"lead\">{weatherData.MinTemp}&deg;C | {weatherData.MaxTemp}&deg;C</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"col-md-6 my-1\">\r\n    <div class=\"card text-white text-center darkbg\">\r\n      <div class=\"card-body\">\r\n      <div className='bg-dark bg-opacity-50 p-3'>\r\n        <h5 class=\"card-title\">Soil Data</h5>\r\n        <p class=\"card-text lead\">{new Date(soilData.dt * 1000).toString().substr(0,21)}</p><hr/>\r\n        <p class=\"font-monospace\">Surface temperature</p>\r\n        <h1 className='fw-bolder mb-2'>{(soilData.t0-273.15).toFixed(2)}&deg;C</h1>\r\n        <p class=\"font-monospace\">Temperature on the<br/>10 centimeters depth</p>\r\n        <h2 className='fw-light mb-3'>{(soilData.t10-273.15).toFixed(2)}&deg;C</h2>\r\n        <h4 class=\"fw-lighter\">Soil moisture {soilData.moisture} m3/m3</h4>\r\n      </div></div>\r\n    </div>\r\n  </div>\r\n</div></div>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default CurrentWeather","import React from 'react'\r\nimport {\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    AreaChart,\r\n    Area,\r\n    BarChart,\r\n    Bar\r\n} from 'recharts';\r\nimport { MaskedInput, Placeholder } from 'rsuite';\r\nimport Weather from '../Weather';\r\nimport CurrentWeather from './CurrentWeather';\r\nconst AllWeatherDataLinks = ({polyid}) => {\r\n    const [forecastData, setForecastData] = React.useState([]);\r\n    const [customforecastData, setCustomForecastData] = React.useState([])\r\n    const [custom5forecastData, setCustom5ForecastData] = React.useState([])\r\n    // const [polyId,setPolyId]=React.useState(\"\");\r\n    const [loading, setLoading] = React.useState(true);\r\n    React.useEffect(() => {\r\n        // setPolyId(polyid);\r\n        getWeatherData();\r\n    }, [polyid]);\r\n    const apikey = \"1f0c9dbc13546bee076b99c95c97aa4c\";\r\n    const polyId=polyid;\r\n\r\n\r\n\r\n\r\n    const getWeatherData = async () => {\r\n      setLoading(true);\r\n        try {\r\n            const url = `https://api.agromonitoring.com/agro/1.0/weather/forecast?polyid=${polyId}&units=metric&appid=${apikey}`\r\n            const response = await fetch(url);\r\n            if(!response){throw new Error('Response not ok');}\r\n            const data = await response.json();\r\n            // console.log(data);\r\n            // setForecastData(data);\r\n\r\nvar wedata= data.map((ele) => {\r\n  var tm=new Date(ele.dt * 1000).getHours();\r\n  var dt=new Date(ele.dt * 1000).toISOString().substr(0,10);\r\n  var dtt=new Date(ele.dt * 1000).toString().substr(0,18);\r\nvar obj={\r\n  \"FilterTime\":tm,\r\n  \"Time\":dtt,\r\n  \"Date\":dtt,\r\n  \"MaxTemp\":ele.main.temp_max,\r\n  \"MinTemp\":ele.main.temp_min,\r\n  \"Temp\":ele.main.temp,\r\n  \"Humidity\":ele.main.humidity,\r\n  \"Pressure\":ele.main.pressure+\"hPa\",\r\n  \"WindSpeed\":ele.wind.speed,\r\n  \"WDescp\":ele.weather[0].description,\r\n  \"clouds\":ele.clouds.all, \r\n}\r\n    return (\r\n         obj\r\n        );\r\n    });\r\n    // console.log(wedata);\r\n  var wedata2 =wedata.filter(ele=>ele.FilterTime==11);\r\n  \r\n  \r\n  \r\n    setCustomForecastData(wedata);\r\n    setCustom5ForecastData(wedata2);\r\n    setLoading(false);\r\n  }\r\n    catch (error) {\r\n      console.log(error);\r\n  }\r\n  };\r\n\r\n    return (\r\n      <div>\r\n<div className='container' style={{height:\"auto\"}}>\r\n\r\n          {loading &&<div className='container-fluid darkbg justify-content-center' style={{height:240}}> \r\n       <Placeholder.Graph active className='rs-theme-dark mt-3'/> </div>}\r\n          {!loading &&\r\n          <div className='card overflow-auto darkbg color-white d-flex flex-column text-center m-sm-5 rounded-lg' style={{height:\"auto\"}}>\r\n          <div className=\"card-body\">\r\n           \r\n         <h1 className=\"lead\">Stats Chart</h1>\r\n        \r\n         <AreaChart className='justify-content-center'\r\n          width={1000}\r\n          height={300}\r\n         data={customforecastData}\r\n         margin={{\r\n          top: 5,\r\n          right: 30,\r\n          left: 20,\r\n          bottom: 5,\r\n        }}\r\n        >\r\n  <defs>\r\n    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n      <stop offset=\"5%\" stopColor=\"8884d88\"  stopOpacity={0.8}/>\r\n      <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n    </linearGradient>\r\n    <linearGradient id=\"colorPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n      <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8}/>\r\n      <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0}/>\r\n    </linearGradient>\r\n    <linearGradient id=\"colorRv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n      <stop offset=\"5%\" stopColor=\"#FF0000\" stopOpacity={0.8}/>\r\n      <stop offset=\"95%\" stopColor=\"#FF0000\" stopOpacity={0}/>\r\n    </linearGradient>\r\n  </defs>\r\n  <XAxis  xAxisId=\"0\" dataKey=\"Time\" tickLine={false} axisLine={false} minTickGap={10}  orientation=\"top\" tickFormatter={number=>`${number}:00`}/>\r\n  {/* <XAxis  xAxisId=\"0\" dataKey=\"WDescp\"  tickLine={false} axisLine={false} minTickGap={10}  orientation=\"top\" /> */}\r\n  <YAxis dataKey=\"Temp\" tickLine={false} axisLine={false} tickCount={5} />\r\n  <CartesianGrid strokeDasharray=\"3 3\" opacity={0.2} vertical={false}/>\r\n  <Tooltip content={<CustomTooltip/>} />\r\n  <Legend/>\r\n  \r\n  <Area type=\"monotone\" dataKey=\"Temp\" stroke=\"#82ca9d\" fillOpacity={1} fill=\"url(#colorPv)\" />\r\n  {/* <Area type=\"monotone\" dataKey=\"Humidity\" /> */}\r\n  {/* stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorUv)\" */}\r\n  \r\n  {/* <Area type=\"monotone\" dataKey=\"wind.speed\" stroke=\"#FF0000\" fillOpacity={1} fill=\"url(#colorRv)\" /> */}\r\n  {/* <Area type=\"monotone\" dataKey=\"\"  /> */}\r\n  \r\n</AreaChart>\r\n</div></div> \r\n}\r\n{!loading &&\r\n  <div className='card overflow-auto darkbg color-white d-flex text-center m-sm-5 rounded-lg' style={{height:\"auto\"}}>\r\n          <div className=\"card-body\">\r\n\r\n\r\n\r\n   <h2 className='lead'>Daily Weather Forecast</h2>   \r\n<BarChart width={800} height={300} data={custom5forecastData}>\r\n  <defs>\r\n  <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n      <stop offset=\"25%\" stopColor=\"#00498D\" stopOpacity={0.8}/>\r\n      <stop offset=\"95%\" stopColor=\"#00498D\" stopOpacity={0}/>\r\n    </linearGradient>\r\n    <linearGradient id=\"coloPv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n      <stop offset=\"25%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n      <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n    </linearGradient>\r\n  </defs>\r\n  <CartesianGrid opacity={0.2} vertical={false} />\r\n  <XAxis dataKey=\"Date\"/>\r\n  <YAxis />\r\n  <Tooltip content={<CustomTooltip/>} />\r\n  <Legend />\r\n  <Bar type=\"monotone\" dataKey=\"Temp\" stroke=\"#00498D\" fill=\"url(#colorUv)\" />\r\n  <Bar type=\"monotone\" dataKey=\"MinTemp\" stroke=\"#8884d8\" fill=\"url(#colorPv)\" />\r\n</BarChart>\r\n</div></div>\r\n       \r\n      }\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction CustomTooltip({active,payload,label}){\r\nif(active){\r\n  return (\r\n    <div style={{color:\"white\"}}>\r\n      <h6>{label}:00 Hrs</h6>\r\n      <p>State:{payload[0].payload.WDescp}</p>\r\n      <p>Temp:{payload[0].payload.Temp}&deg;C</p>\r\n      <p>Humidity:{payload[0].payload.Humidity}%</p>\r\n      <p>Wind Speed:{payload[0].payload.WindSpeed}m/s</p>\r\n      <p>Clouds:{payload[0].payload.clouds}%</p>\r\n    </div>\r\n  )\r\n}\r\nelse return null\r\n}\r\nexport default AllWeatherDataLinks\r\n","import React from 'react'\r\nimport { render } from 'react-dom';\r\nimport { Modal, Table } from 'rsuite';\r\n\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\n// const data = fakeData.filter((v, i) => i < 8);\r\nconst AllPolygonData = ({ polyData }) => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [sortColumn, setSortColumn] = React.useState();\r\n  const [sortType, setSortType] = React.useState();\r\n  const [loading, setLoading] = React.useState(false);\r\n  let navigate = useNavigate();\r\n  console.log(\"polypagee\");\r\n  console.log(polyData);\r\n  const data = polyData;\r\n  const getData = () => {\r\n    if (sortColumn && sortType) {\r\n      return data.sort((a, b) => {\r\n        let x = a[sortColumn];\r\n        let y = b[sortColumn];\r\n        if (typeof x === 'string') {\r\n          x = x.charCodeAt();\r\n        }\r\n        if (typeof y === 'string') {\r\n          y = y.charCodeAt();\r\n        }\r\n        if (sortType === 'asc') {\r\n          return x - y;\r\n        } else {\r\n          return y - x;\r\n        }\r\n      });\r\n    }\r\n    return data;\r\n  };\r\n\r\n  const handleSortColumn = (sortColumn, sortType) => {\r\n    setLoading(true);\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n      setSortColumn(sortColumn);\r\n      setSortType(sortType);\r\n    }, 500);\r\n  };\r\n  return (\r\n\r\n\r\n    <div className='container-fluid mt-5 mb-5 darkbg rounded' >\r\n\r\n      <div className='card shadow darkbg rounded'>\r\n        <button className='btn btn-pink-moon font-monospace my-3' style={{ maxWidth: 300 }}\r\n          onClick={() => { navigate(\"/create\") }}>Create Polygon</button>\r\n        <div className='card-body greybg text-white text-center mb-3'>\r\n\r\n          <Table\r\n           \r\n            height={420}\r\n            data={getData()}\r\n            className=\"rs-theme-high-contrast\"\r\n            sortColumn={sortColumn}\r\n            sortType={sortType}\r\n            onSortColumn={handleSortColumn}\r\n            loading={loading}\r\n            onRowClick={data => {\r\n              console.log(data._id);\r\n            }}\r\n          >\r\n            <Table.Column flexGrow={2} align=\"center\" sortable className=\"bluebg\">\r\n              <Table.HeaderCell>Name</Table.HeaderCell>\r\n              <Table.Cell dataKey=\"name\" />\r\n            </Table.Column>\r\n\r\n            <Table.Column flexGrow={1.5} sortable>\r\n              <Table.HeaderCell>Area</Table.HeaderCell>\r\n              <Table.Cell dataKey=\"area\" />\r\n            </Table.Column>\r\n\r\n            <Table.Column flexGrow={2} sortable>\r\n              <Table.HeaderCell>Created On</Table.HeaderCell>\r\n              <Table.Cell dataKey=\"created_on\" />\r\n            </Table.Column>\r\n            <Table.Column flexGrow={1} >\r\n              <Table.HeaderCell>Action</Table.HeaderCell>\r\n\r\n              <Table.Cell>\r\n                {rowData => {\r\n                  const handleAction = async () => {\r\n\r\n                    var polygon_id = rowData._id;\r\n                    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n                    const { _id } = userInfo;\r\n                    // var _id=data._id;\r\n                    console.log(_id);\r\n                    try {\r\n                      setLoading(true);\r\n                      const response = await fetch(`/api/users/${_id}`, {\r\n                        method: 'PATCH',\r\n                        headers: {\r\n                          'Accept': 'application/json',\r\n                          'Content-Type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({ _id, polygon_id })\r\n                      })\r\n                      const data = await response.json();\r\n\r\n                      if (response.status == 400) {\r\n                        // setError(data.message)\r\n                        console.log(data.message);\r\n                      }\r\n                      else {\r\n                        console.log(data);\r\n                        localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n                        // forceUpdate();\r\n                        navigate(\"/deleting\");\r\n                        setLoading(false);\r\n\r\n                      }\r\n                    }\r\n                    catch (err) {\r\n                      console.log(err)\r\n\r\n\r\n                    }\r\n                  }\r\n                  return (\r\n                    <span>\r\n                      {/* <a onClick={handleAction}><i className='fas fa-edit'></i></a> | */}\r\n                      <a onClick={()=>{setOpen(true);}}><i className='fas fa-close fa-lg'></i></a>\r\n                      <Modal open={open} onClose={()=>{setOpen(false);}}>\r\n        <Modal.Header>\r\n          <Modal.Title className='font-monospace'> <i class=\"fa-solid fa-trash \"></i> Delete Polygon</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='font-monospace'>\r\n          <h5>Are you sure you want to delete</h5>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <button className=\"btn btn-danger m-1\" \r\n         onClick={handleAction}>Ok</button> \r\n          <button onClick={()=>{setOpen(false)}} className=\"btn btn-primary\">\r\n            Cancel\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n                    </span>\r\n                  );\r\n                }}\r\n              </Table.Cell>\r\n            </Table.Column>\r\n          </Table>\r\n\r\n        </div></div></div>\r\n\r\n  )\r\n}\r\n\r\nexport default AllPolygonData","import React from 'react'\r\nimport MapGL, { Source, Layer,GeolocateControl } from \"@urbica/react-map-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n//  import \"./style.css\";\r\nimport \"./sidebar.css\";\r\n// import \"../App.css\";\r\nimport ShowMap from './ShowMap';\r\nimport Weather from './Weather';\r\nimport AllStats from './AllStats';\r\nimport Loading from './loginss/Loading';\r\nimport StatsImage from './StatsImage';\r\nimport Ndvicall from './stats/Ndvicall';\r\nimport Navbar from './Navbar';\r\nimport { Button } from 'react-bootstrap';\r\nimport AllWeatherDataLinks from './GraphicalData/AllWeatherDataLinks';\r\nimport AllPolygonData from './AllPolygonData';\r\nimport WebMercatorViewport from \"viewport-mercator-project\";\r\nimport CurrentWeather from './GraphicalData/CurrentWeather';\r\nimport { ButtonToolbar, Modal, Placeholder } from 'rsuite';\r\n\r\n\r\n\r\nconst Polygon = ({ allInfo }) => {\r\n  const [viewport, setViewport] = React.useState({\r\n    latitude: 0,\r\n    longitude: 0,\r\n    zoom: 1,\r\n  });\r\n  const [open, setOpen] = React.useState(false);\r\n  const [isOpen, setIsOpen] = React.useState(false);\r\n  const [viewPoly, setViewPoly] = React.useState({});\r\n  const [ndviInfo, setNdviInfo] = React.useState([]);\r\n  const [polyInfo, setPolyInfo] = React.useState({});\r\n  const [statsInfo, setStatsInfo] = React.useState({});\r\n  const [imageInfo, setImageInfo] = React.useState({});\r\n  const [polyId, setPolyId] = React.useState(\"\");\r\n  const [loadingData, setLoadingData] = React.useState(false);\r\n  const [ndviloadingData, setNdviLoadingData] = React.useState(false);\r\n  const [isvisible, setvisibility] = React.useState({\r\n    \"polypage\": true,\r\n    \"statspage\": false,\r\n    \"forecastpage\": false\r\n  })\r\n  const apikey =\"1f0c9dbc13546bee076b99c95c97aa4c\";\r\n  console.log(apikey)\r\n\r\n  React.useEffect(() => {\r\n    console.log(polyInfo);\r\n    console.log(statsInfo);\r\n    console.log(imageInfo);\r\n    viewPort(polyInfo);\r\n\r\n  }, [loadingData, imageInfo, statsInfo]);\r\n\r\n  const viewPort = (ele) => {\r\n    if (loadingData == true) {\r\n\r\n      const cordarray = polyInfo.geo_json.geometry.coordinates[0];\r\n      const cord = cordarray.map((ele) => {\r\n        var coordinates = {\r\n          lng: ele[0],\r\n          lat: ele[1]\r\n        }\r\n        return (\r\n          coordinates\r\n        )\r\n      })\r\n      console.log(cord);\r\n      const lat = cord.map(location => parseFloat(location.lat));\r\n      const lng = cord.map(location => parseFloat(location.lng));\r\n\r\n      // Note that WebMercatorViewport requires this format [lng, lat]\r\n      const minCoords = [Math.min.apply(null, lng), Math.min.apply(null, lat)];\r\n      const maxCoords = [Math.max.apply(null, lng), Math.max.apply(null, lat)];\r\n      const formattedGeoData = [minCoords, maxCoords];\r\n\r\n      const vPort = new WebMercatorViewport({\r\n        width: 500,\r\n        height: 400\r\n      }).fitBounds(formattedGeoData, {\r\n        padding: 100\r\n      });\r\n      const { latitude, longitude, zoom } = vPort;\r\n\r\n      var setlonlat = {\r\n        latitude: latitude,\r\n        longitude: longitude,\r\n        zoom: zoom,\r\n      }\r\n      setViewport(setlonlat);\r\n\r\n      var polygonCoordinates = [];\r\n      polygonCoordinates = polyInfo.geo_json.geometry.coordinates;\r\n\r\n      var body1 = { type: \"Feature\", geometry: { type: \"Polygon\", coordinates: polygonCoordinates } }\r\n      setViewPoly(body1);\r\n    }\r\n  }\r\n  //EXPERIMENTAL AREA***********************************\r\n  const newallFunctionCall = (ele) => {\r\n    console.log(\"getting called bro-->>>\" + ele);\r\n    ndviStats(ele);\r\n    getPolygonInfo(ele)\r\n    setPolyId(ele);\r\n  }\r\n\r\n  const ndviStats = async (polyId) => {\r\n    try {\r\n      setNdviLoadingData(false);\r\n      var currentDate = Math.floor(new Date().getTime() / 1000.0);\r\n      var minus20days = currentDate - 2678400 - 2678400;\r\n      //2678400\r\n      console.log(currentDate);\r\n      let ndviurl1 = `https://api.agromonitoring.com/agro/1.0/image/search?start=${minus20days}&end=${currentDate}&polyid=${polyId}&appid=${apikey}`\r\n\r\n      const ndviResponse1 = await fetch(ndviurl1);\r\n      const allData = await ndviResponse1.json();\r\n      console.log(allData);\r\n      // console.log(ndviResponse1);\r\n      setImageInfo(allData[0].image);\r\n      setStatsInfo(allData[0].stats);\r\n      setNdviLoadingData(true);\r\n      //  console.log(statsInfo)\r\n      console.log(imageInfo);\r\n    }\r\n    catch (error) {\r\n      //put an errrror message box later\r\n      console.log(error);\r\n    }\r\n  }\r\n  const getPolygonInfo = async (ele) => {\r\n    setLoadingData(false);\r\n    console.log(\"i am inside polygonInfo\");\r\n    console.log(ele);\r\n    try {\r\n      const url = `http://api.agromonitoring.com/agro/1.0/polygons/${ele}?appid=${apikey}`;\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      console.log(data.geo_json.geometry.coordinates);\r\n      const cordarray = data.geo_json.geometry.coordinates[0];\r\n      const cord = cordarray.map((ele) => {\r\n        var coordinates = {\r\n          lng: ele[0],\r\n          lat: ele[1]\r\n        }\r\n        return (\r\n          coordinates\r\n        )\r\n      })\r\n      console.log(cord);\r\n      const lat = cord.map(location => parseFloat(location.lat));\r\n      const lng = cord.map(location => parseFloat(location.lng));\r\n\r\n      // Note that WebMercatorViewport requires this format [lng, lat]\r\n      const minCoords = [Math.min.apply(null, lng), Math.min.apply(null, lat)];\r\n      const maxCoords = [Math.max.apply(null, lng), Math.max.apply(null, lat)];\r\n      const formattedGeoData = [minCoords, maxCoords];\r\n\r\n      const vPort = new WebMercatorViewport({\r\n        width: 500,\r\n        height: 400\r\n      }).fitBounds(formattedGeoData, {\r\n        padding: 20\r\n      });\r\n      //  console.log(vPort);\r\n\r\n\r\n      setPolyInfo(data);\r\n\r\n      console.log('finished');\r\n      setLoadingData(true);\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n    //    console.log(polyInfo)\r\n    \r\n  };\r\n\r\n  const changevisibility = (ele) => {\r\n    if (ele == \"statspage\") {\r\n      setvisibility({ \"statspage\": true, \"polypage\": false, \"forecastpage\": false })\r\n    }\r\n    else if (ele == \"polypage\") {\r\n      setvisibility({ \"polypage\": true, \"statspage\": false, \"forecastpage\": false })\r\n    }\r\n    else if (ele == \"forecastpage\") {\r\n      setvisibility({ \"forecastpage\": true, \"polypage\": false, \"statspage\": false })\r\n    }\r\n  }\r\n\r\n  const openNav = () => {\r\n    console.log(\"yesss\")\r\n    document.getElementById(\"mySidepanel\").style.width = \"250px\";\r\n    document.getElementById(\"main\").style.marginLeft = \"250px\";\r\n    document.getElementById(\"navigationlist\").style.opacity = \"1\";\r\n    \r\n  }\r\n\r\n  /* Set the width of the sidebar to 0 (hide it) */\r\n  const closeNav = () => {\r\n    document.getElementById(\"mySidepanel\").style.width = \"0\";\r\n    document.getElementById(\"main\").style.marginLeft = \"0\";\r\n    // document.getElementById(\"navigationlist\").style.opacity = \"0\";\r\n   \r\n  \r\n  }\r\n\r\n  //**************************************************************** */\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Navbar/>\r\n    <div id='main' >\r\n\r\n\r\n      <div id=\"mySidepanel\" class=\"sidepanel rounded-right\">\r\n        <a href=\"#\" class=\"closebtn\" onClick={() => closeNav()}>&times;</a>\r\n        <ul class=\"sidebar-navigation\" id=\"navigationlist\">\r\n          <li class=\"header\">Navigation</li>\r\n          <li>\r\n            <a onClick={() => {changevisibility(\"polypage\");closeNav();}}>\r\n            <small><i class=\"fa fa-tachometer\" aria-hidden=\"true\"></i></small>Dashboard\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a  onClick={() => {changevisibility(\"forecastpage\");closeNav();}}>\r\n             <small> <i class=\"fa-solid fa-satellite\" aria-hidden=\"true\"></i></small>  Weather Data\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a  onClick={() => {changevisibility(\"statspage\");closeNav();}}> \r\n             <small> <i class=\"fa-solid fa-temperature-half\" aria-hidden=\"true\"></i></small>  Satellite Data\r\n            </a>\r\n          </li>\r\n          <li class=\"header\">Another Menu</li>\r\n         \r\n          <li><Link className=\"nav-item nav-link \" to=\"/create\"><small><i class=\"fa-solid fa-draw-polygon\"></i></small> Create Polygon </Link></li>\r\n          <li><Link className=\"nav-item nav-link\" to=\"/notes\"><small><i class=\"fa-solid fa-note-sticky\"></i> </small> Farm Notes</Link></li>\r\n          <li><Link className=\"nav-item nav-link\" to=\"/info\"><small><i class=\"fa-solid fa-circle-info\"></i> </small> Information</Link></li>\r\n          \r\n          <li> \r\n        <a className=\"nav-item nav-link\" onClick={()=>{setOpen(true);closeNav();}}><i class=\"fa-solid fa-arrow-right-from-bracket\"></i> Log Out</a>\r\n      \r\n      <Modal open={open} onClose={()=>{setOpen(false);}}>\r\n        <Modal.Header>\r\n          <Modal.Title className='font-monospace'> <i class=\"fa-solid fa-arrow-right-from-bracket\"></i> Log Out</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className='font-monospace'>\r\n          <h5>Are you sure you want to Log out</h5>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Link className=\"btn btn-primary m-1\" appearance=\"primary\" to=\"/login\"\r\n         onClick={() => { localStorage.removeItem(\"userInfo\");}}>Ok</Link> \r\n          <Button onClick={()=>{setOpen(false)}} appearance=\"subtle\">\r\n            Cancel\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n            </li> </ul>\r\n\r\n\r\n        {/* <div className=\"custom-menu\"> */}\r\n\r\n        {/* <button id=\"openbtn\" class=\"btn btn-primary\" onClick={()=>openNav()}><i class=\"fa fa-bars\"></i></button> */}\r\n        {/* </div> */}\r\n      </div>\r\n      \r\n\r\n\r\n\r\n\r\n\r\n\r\n      <div className=\"container-fluid  bg-transparent\">\r\n      <button id=\"openbtn\" class=\"openbtn rounded\" onClick={() => openNav()}><i class=\"fa fa-bars\"></i></button>\r\n        <div className=\"row justify-content-center\">\r\n          <div className=\"col-sm-8\">\r\n            <div className='card darkbg rounded '>\r\n              <div className='card-body '>\r\n                <MapGL\r\n                  style={{ width: \"auto\", height: \"40vh\" }}\r\n                  mapStyle=\"mapbox://styles/vodka1239/ckwrxbt7m2o0w14mkego6tq66\"\r\n                  accessToken={\r\n                    \"pk.eyJ1Ijoidm9ka2ExMjM5IiwiYSI6ImNrdzJmN2R1NTFlcTMzMG50eDl6dWJjcmEifQ.NGfXBblYkTumrHt-8kYh-A\"\r\n                  }\r\n                  onViewportChange={setViewport}\r\n                  {...viewport}\r\n                  viewportChangeMethod='flyTo'\r\n                >\r\n                   {/* <FullscreenControl position='top-right' /> */}\r\n                   <GeolocateControl position='top-right' />\r\n                    \r\n                  {/* <NavigationControl showZoom={true}  /> */}\r\n                  <Source \r\n                  id=\"maine\" type=\"geojson\" data={viewPoly} />\r\n                   <Layer\r\n                    id=\"maine\"\r\n                    type=\"fill\"\r\n                    source=\"maine\"\r\n                    paint={{\r\n                      \"fill-color\": \"blue\",\r\n                      \"fill-opacity\": 0.5,\r\n                    }}\r\n                  />\r\n                  {/* *************************** FOR FUTURE REFERENCE **********************************/}\r\n                  {/* <Source \r\n                  id='raster'\r\n                  type='raster'\r\n                  tileSize={126}\r\n                  tiles={[`${imageInfo.ndvi}`]}\r\n                /> \r\n                 <Layer id='raster' type='raster' source='raster' /> */}\r\n                {/* ************************************************************************************* */}\r\n                 \r\n                 \r\n                </MapGL>\r\n              </div></div>\r\n          </div>\r\n          <div className=\"col-sm-4 \" style={{ height: \"44vh\" }}>\r\n            <div className='card h-100 overflow-auto darkbg rounded hidescroll'>\r\n              <div className='card-body'>\r\n                {\r\n                  allInfo.map((ele) => {\r\n                    return (\r\n                      <div key={ele.id}><button className=\"btn btn-info fcsbtn m-1 \" style={{ width: \"100%\" }} onClick={() => newallFunctionCall(`${ele.id}`)}>{ele.name}</button></div>\r\n                    );\r\n                  })\r\n                }\r\n              </div></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {isvisible.statspage && !ndviloadingData && <div className='container-fluid darkbg' style={{height:300}}> \r\n      <Placeholder.Paragraph className=\"rs-theme-high-contrast\" style={{ marginTop: 30 }} rows={10}  active /> </div>} \r\n      {isvisible.statspage && ndviloadingData && <AllStats allstatsInfo={statsInfo} allImageInfo={imageInfo} polyid={polyId} view={viewport} />}\r\n      {/* <Ndvicall polyId={polyId}/> */}\r\n      {isvisible.forecastpage && <CurrentWeather polyid={polyId} />}\r\n      {isvisible.forecastpage && <AllWeatherDataLinks polyid={polyId} />}\r\n      {isvisible.polypage && <AllPolygonData polyData={allInfo} />}\r\n      {/* <StatsImage/> */}\r\n    </div></div>\r\n  )\r\n}\r\n\r\nexport default Polygon\r\n","import React from 'react'\r\nimport Weatherdata from './Weatherdata copy';\r\nimport Temp from './Temp';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Polygon from './Polygon copy';\r\nimport AllWeatherDataLinks from './GraphicalData/AllWeatherDataLinks';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\n\r\nconst Weather = () => {\r\n    const navigate = useNavigate();\r\n    const [info, setInfo] = React.useState({});\r\n    const [pdata, setPdata] = React.useState([]);\r\n    // const [data, setData] = React.useState([]);\r\n    const [loadingData, setLoadingData] =React.useState(false);\r\n    var polyData=[];\r\n    React.useEffect(() => {\r\n        let userInfo = localStorage.getItem(\"userInfo\");\r\n        if (!userInfo) {\r\n            \r\n            navigate(\"/login\")\r\n            toastmessage( \"Login First !!\");\r\n        }\r\n        else{\r\n        userInfo=JSON.parse(userInfo);\r\n        polyData=userInfo.polyid;\r\n        \r\n        if(typeof polyData !== 'undefined' && polyData.length > 0){ \r\n            console.log(polyData);\r\n            setPdata(polyData);   \r\n        }\r\n        else{\r\n            \r\n            navigate(\"/create\");\r\n            toast.info('Create Polygon First', {\r\n                position: \"top-right\",\r\n                autoClose: 5000,\r\n                hideProgressBar: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                });\r\n            // toastmessage(\"Create a Polygon First !\");\r\n        }}\r\n        // getWeatherData();\r\n    }, []);\r\n    // React.useEffect(() => {\r\n    //     console.log(pdata);\r\n    //     let newState = pdata.map((e) => e); // map your state here\r\n    //     // setData(newState); // and then update the state\r\n    //     console.log(newState);\r\n    //  },[]);\r\n\r\n    const apikey = \"7436a3b54d0b0bb376d8185b1fbe2aa9\";\r\n    const getWeatherData = async () => {\r\n        console.log(\"i am inside weather\");\r\n        //  setPdata(polyData);\r\n        try {\r\n        //    let results=Promise.all(pdata.map(async(ele)=>{\r\n        //         console.log(ele);\r\n            // const url=`http://api.agromonitoring.com/agro/1.0/polygons/${ele.id}?appid=${apikey}`;\r\n        //     // const url1 = `http://api.agromonitoring.com/agro/1.0/polygons?appid=${apikey}`\r\n        //     // // const polyurl = 'http://api.agromonitoring.com/agro/1.0/polygons/'\r\n        //     // // const soilurl = 'http://api.agromonitoring.com/agro/1.0/soil?'\r\n\r\n        //     const response = await fetch(url);\r\n        //     const data = await response.json();\r\n        //     console.log(data.center);\r\n        //     const center=data.center;\r\n        //     setInfo({...info,center});\r\n        // }))\r\n        for (let ele of pdata) {\r\n            const url=`http://api.agromonitoring.com/agro/1.0/polygons/${ele.id}?appid=${apikey}`;\r\n            const response = await fetch(url);\r\n             const data = await response.json();\r\n             console.log(data);\r\n             setInfo({...info,data});\r\n        }\r\n        console.log('finished');\r\n       setLoadingData(true);\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n \r\n    const toastmessage = (message) => {\r\n        console.log(message);\r\n        toast.info(message, {\r\n            position: \"top-right\",\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n            });\r\n      }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* <p>This is my first react code </p> */}\r\n            <Polygon allInfo={pdata} />\r\n           \r\n           {/* <Weatherdata wedata={pdata} apikey={apikey}/> */} \r\n            {/* <Temp apikeyy={apikey}/> */}\r\n            <ToastContainer theme='colored' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather\r\n\r\n","import React from 'react'\r\nimport {Alert} from 'react-bootstrap';\r\nimport { Notification, toaster } from 'rsuite';\r\nconst ErrorMessage = ({variant=\"info\",children}) => {\r\n  const message=(\r\n    <Notification closable type={variant} header='Error'>\r\n      <h5>{children}</h5>\r\n    </Notification>);\r\n   \r\n    toaster.push(message,{placement: 'topEnd'});\r\n  return (\r\n    <></>\r\n    // <div>\r\n    //     <Alert variant={variant} style={{fontSize:20}}>\r\n    //         <strong>{children}</strong>\r\n    //     </Alert>\r\n    // </div>\r\n  //   <div className=\"notification-container\">\r\n  //   <Notification closable type='error' placement='topCenter'>\r\n  //     <h3>{children}</h3>\r\n  //   </Notification>\r\n  //   {/* <Notification closable type=\"info\" header=\"Informational\">\r\n  //     <Paragraph width={320} rows={3} />\r\n  //   </Notification> */}\r\n  // </div>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage","import React, { useState } from 'react'\r\nimport ReactMapboxGl from 'react-mapbox-gl';\r\nimport DrawControl from 'react-mapbox-gl-draw';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\nimport '@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css';\r\nimport Weather from './Weather';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport Loading from '../component/loginss/Loading';\r\nimport ErrorMessage from './loginss/ErrorMessage';\r\nimport { Modal, Notification, toaster } from 'rsuite';\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport Navbar from './Navbar';\r\n\r\n// import \"./style1.css\";\r\nconst Map = ReactMapboxGl({\r\n  accessToken:\r\n    'pk.eyJ1Ijoidm9ka2ExMjM5IiwiYSI6ImNrdzJmN2R1NTFlcTMzMG50eDl6dWJjcmEifQ.NGfXBblYkTumrHt-8kYh-A',\r\n});\r\n\r\nconst ShowMap = () => {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [mapLayers, setMapLayers] = React.useState([]);\r\n  const [mapCord, setMapCord] = React.useState([]);\r\n  const [polygonData, setPolygonData] = React.useState({});\r\n  const [gotData, setGotData] = React.useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  // React.useEffect(() => {\r\n  //   if (gotData == true) {\r\n  //     localStorage.setItem(\"userInfo\", JSON.stringify(polygonData));\r\n  //     console.log(polygonData);\r\n  //   }\r\n\r\n\r\n  // }, [gotData])\r\n\r\n\r\n  let navigate = useNavigate();\r\n  const onDrawCreate = ({ features }) => {\r\n    console.log(features[0]);\r\n    console.log(features[0].geometry.coordinates);\r\n    const test = features[0].geometry.coordinates;\r\n    var dataMap = test.map((ele) =>\r\n      (ele)\r\n    )\r\n    setMapCord(dataMap);\r\n  };\r\n\r\n  const onDrawUpdate = ({ features }) => {\r\n    console.log(features);\r\n  };\r\n\r\n\r\n  var stringifyDataMap = mapCord;\r\n  // console.log(JSON.stringify(stringifyDataMap));\r\n\r\n\r\n  const create_poly = async (name1) => {\r\n    // setGotData(false);\r\n    const id = toast.loading(\"Please wait...\", { closeOnClick: true, draggable: true ,autoClose: 5000,});\r\n    const polyName = `\"name\":\"${name1}\"`\r\n    var body1 = `{${polyName},\"geo_json\":{\"type\":\"Feature\",\"properties\":{},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":${JSON.stringify(stringifyDataMap)}}}}`\r\n    console.log(body1);\r\n    console.log(polyName);\r\n    try {\r\n      const response = await fetch('http://api.agromonitoring.com/agro/1.0/polygons?appid=1f0c9dbc13546bee076b99c95c97aa4c', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: body1\r\n      })\r\n\r\n      const data = await response.json();\r\n      console.log(data);\r\n      if (response.status == 422 && data.message.substr(0, 1) == \"A\") { toastmessage(\"error\", id, data.message) }\r\n      else if (response.status == 422 && data.message == \"Your polygon needs a name\") { toastmessage(\"error\", id, data.message) }\r\n\r\n      else if (response.status == 422) {\r\n\r\n        toastmessage(\"error\", id, \"Your Polygon intersects itself , duplicated or empty\");\r\n        // toast.update(id, {\r\n        //   render: (data.message).substr(0, 30), type: \"error\", isLoading: false,\r\n        //   position: \"top-right\",\r\n        //   autoClose: 5000,\r\n        //   hideProgressBar: false,\r\n        //   closeOnClick: true,\r\n        //   pauseOnHover: true,\r\n        //   draggable: true,\r\n        //   progress: undefined\r\n        // });\r\n        // toast.error((data.message).substr(0,30));\r\n      }\r\n\r\n\r\n      else {\r\n        var polyid = {\r\n          \"name\": data.name,\r\n          \"id\": data.id,\r\n          \"area\": data.area.toFixed(2),\r\n          \"created_on\": new Date(data.created_at * 1000).toString().substr(4, 12)\r\n        };\r\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        // const idd=tempid._id;\r\n        console.log(userInfo);\r\n        console.log(polyid);\r\n        const { _id } = userInfo;\r\n        console.log(_id);\r\n        // try {\r\n          // setLoading(true);\r\n          const response1 = await fetch(`/api/users/${_id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ _id, polyid })\r\n          })\r\n          const data1 = await response1.json();\r\n          setLoading(false);\r\n          if (response1.status == 400 || response1.status == 500) {\r\n            toastmessage(\"error\", id, \"Error Occurred\");\r\n\r\n          }\r\n          else {\r\n            localStorage.setItem(\"userInfo\", JSON.stringify(data1));\r\n            toastmessage(\"success\", id, \"Polygon Created\");\r\n            // <Modal open={open} onClose={() => { setOpen(false); }}>\r\n            //   <Modal.Header>\r\n            //     <Modal.Title className='font-monospace'> <i class=\"fa-solid fa-arrow-right-from-bracket\"></i> Log Out</Modal.Title>\r\n            //   </Modal.Header>\r\n            //   <Modal.Body className='font-monospace'>\r\n            //     <h5>Are you sure you want to Log out</h5>\r\n            //   </Modal.Body>\r\n            //   <Modal.Footer>\r\n            //     {/* <Link className=\"btn btn-primary m-1\" appearance=\"primary\" to=\"/login\"\r\n            //       onClick={() => { localStorage.removeItem(\"userInfo\"); }}>Ok</Link> */}\r\n            //     {/* <Button onClick={() => { setOpen(false) }} appearance=\"subtle\">\r\n            //       Cancel\r\n            //     </Button> */}\r\n            //   </Modal.Footer>\r\n            // </Modal>\r\n          }\r\n        // }\r\n        // catch (err) {\r\n        //   toastmessage(\"error\", id, \"Error Occurred\");\r\n        //   console.log(err)\r\n        // }\r\n        \r\n        // localStorage.setItem(\"userInfo\",JSON.stringify(polygonData));\r\n      }\r\n    }\r\n    catch (err) {\r\n      toastmessage(\"error\", id, \"Error Occurred\");\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  const toastmessage = (variant, id, message) => {\r\n    toast.update(id, {\r\n      render: message, type: variant, isLoading: false,\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined\r\n    });\r\n  }\r\n  return (\r\n    <div>\r\n<Navbar/>\r\n      {/* {error&& <ErrorMessage variant=\"error\">{error}</ErrorMessage>} */}\r\n\r\n      {loading && <Loading />}\r\n\r\n      <div className='container mt-5 vh-100 bg-transparent' >\r\n        <div className='row d-flex justify-content-center'>\r\n          <div className='col-sm-8 pb-3'>\r\n            <div className='card shadow  bluebg rounded'>\r\n              <div className='card-body '>\r\n                <Map\r\n                  style=\"mapbox://styles/vodka1239/ckwrxbt7m2o0w14mkego6tq66\"\r\n                  containerStyle={{\r\n                    height: '70vh',\r\n                    width: 'auto',\r\n\r\n                  }}\r\n                >\r\n                  <DrawControl position={'top-right'} displayControlsDefault={false} controls={{\r\n                    trash: true,\r\n                    polygon: true\r\n                  }} onDrawCreate={onDrawCreate} onDrawUpdate={onDrawUpdate} />\r\n\r\n\r\n                </Map>\r\n              </div></div></div>\r\n          <div className='col-sm-4  ' style={{ height: \"75vh\" }}>\r\n            <div className='card h-100 p-3 shadow p-3 mb-5  bluebg rounded hidescroll overflow-auto text-white'>\r\n              <h5 className=\"lead text-left\"><small class=\"text-muted\">New</small><br />Polygon</h5><hr />\r\n              <div className='card-body'>\r\n                <label className='lead'>Polygon name:</label><input type=\"text\" className=\"form-control\" name=\"name1\" id=\"name1\"></input>\r\n                <hr className='my-2' />\r\n                <p>Minimum area is 1 ha</p>\r\n\r\n                <p>Maximum area is 3000 hа</p>\r\n\r\n                <p>No self-intersections</p><hr className='my-2' />\r\n                <ol class=\"list-group list-group-numbered\">\r\n                  <li class=\"list-group-item\">Click on the polygon tool to activate draw mode.</li>\r\n                  <li class=\"list-group-item\">Place the pointer on the map and click the location of the first point to start drawing.</li>\r\n                  <li class=\"list-group-item\">Continue clicking at each corner of the shape until you have created the polygon.</li>\r\n                  <li class=\"list-group-item\">Click the first point to stop drawing.</li>\r\n                  <li class=\"list-group-item\">Double-click any point to edit.</li>\r\n                </ol>\r\n                <div className='row'>\r\n                  <button className=\" col font-monospace btn bluebtn mr-1 mt-2\" onClick={() => {\r\n                    navigate(\"/\");\r\n                  }}>\r\n                    Cancel\r\n                  </button>\r\n                  <button className='col btn btn-pink-moon font-monospace ml-1 mt-2'\r\n                    onClick={() => create_poly(document.getElementById('name1').value)}>Create</button>\r\n                </div>\r\n              </div></div>\r\n          </div>\r\n\r\n        </div></div>\r\n\r\n      <div>\r\n\r\n      </div>\r\n      {/* <div><Weather /></div> */}\r\n      <ToastContainer theme='colored' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ShowMap\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Row } from 'react-bootstrap';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Loading from './Loading';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\n\r\n\r\nconst Login = () => {\r\n  const [email, setMail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    const userInfo = localStorage.getItem(\"userInfo\");\r\n    if (userInfo) {\r\n      navigate(\"/\")\r\n    }\r\n  }, [navigate])\r\n\r\n  const toastmessage = (variant, id, message) => {\r\n    toast.update(id, {\r\n      render: message, type: variant, isLoading: false,\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined\r\n    });\r\n  }\r\n  const userLogin = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // const response =await fetch(\"/api/users/login\",{\r\n    //   method:\"POST\",\r\n    //   headers:{\r\n    //     'Content-Type' : 'application/json'\r\n    //   },\r\n    //   // credentials:\"include\", \r\n    //   body:JSON.stringify({email,password})\r\n    //  });\r\n\r\n\r\n    // console.log(response);\r\n    // console.log(email,password);\r\n    const id = toast.loading(\"Please wait...\", { closeOnClick: true, draggable: true });\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\"\r\n        }\r\n      }\r\n      // setLoading(true);\r\n      \r\n      const { data } = await axios.post('/api/users/loginn', {\r\n        email, password\r\n      },\r\n        config\r\n      );\r\n      console.log(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      toastmessage(\"success\",id,\"Login Success\" );\r\n      // setLoading(false);\r\n      // setError(false);\r\n      navigate(\"/weather\")\r\n    }\r\n    catch (error) {\r\n      // setError(error.response.data.message)\r\n      toastmessage(\"error\",id,\"Error Occurred...Please try again\" );\r\n      // setLoading(false);\r\n    }\r\n\r\n\r\n  };\r\n  return (\r\n    <div>\r\n<div class=\"area\" >\r\n            <ul class=\"circles\">\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n                    <li></li>\r\n            </ul>\r\n   \r\n\r\n      <div  className='container centering vh-100 text-white pt-5 bg-transparent'>\r\n        <div className='card shadow p-3 mb-5 darkbg rounded'>\r\n          <div className='card-body p-5 '>\r\n      {error && <ErrorMessage variant=\"danger\">{error}</ErrorMessage>}\r\n      {loading && <Loading />}\r\n      <Form onSubmit={userLogin}>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control type=\"email\" className=' input-style ' placeholder=\"Enter email\"\r\n            value={email}\r\n            onChange={(e) => setMail(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n       \r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control type=\"password\"  className=' input-style ' placeholder=\"Password\"\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n        </Form.Group>\r\n\r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Row className=\"py-3\">\r\n        New Customer? <Link to=\"/register\">Register Here</Link>\r\n      </Row>\r\n    </div></div></div>\r\n    <ToastContainer theme='colored' />\r\n    </div> </div >\r\n  )\r\n}\r\n\r\nexport default Login","import React from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport ShowMap from '../ShowMap';\r\n// const jwt=require('jsonwebtoken');\r\n\r\nconst Contact = () => {\r\nconst navigate=useNavigate();\r\n     \r\n    React.useEffect(() => {\r\n        const userInfo=localStorage.getItem(\"userInfo\");\r\n        if(!userInfo){\r\n          navigate(\"/login\")\r\n        }\r\n      }, [navigate])\r\n      \r\n    return (\r\n        <div className='w-100'>\r\n            <ShowMap/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React ,{useState,useEffect }from 'react'\r\nimport { Form, Button, Row } from 'react-bootstrap';\r\nimport { Link,useNavigate } from 'react-router-dom';\r\nimport Loading from './Loading';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\n\r\nconst RegisterScreen = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const [user, setUser] = useState({\r\n    name: \"\", email: \"\", password: \"\"\r\n  });\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\nuseEffect(() => {\r\n  const userInfo = localStorage.getItem(\"userInfo\");\r\n    if (userInfo) {\r\n      navigate(\"/\")\r\n    }\r\n  }, []);\r\n\r\n  let name, value;\r\n  const handleInputs = (e) => {\r\n\r\n    name = e.target.name;\r\n    value = e.target.value;\r\n    setUser({ ...user, [name]: value });\r\n  }\r\n\r\n  const postData = async (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    const id = toast.loading(\"Please wait...\", { closeOnClick: true, draggable: true });\r\n    const { name, email, password } = user;\r\n   try{\r\n    const response = await fetch(\"/api/users/regis\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({ name, email, password })\r\n    });\r\n    \r\n    const data = await response.json();\r\n    setLoading(false);\r\n    console.log(response);\r\n    if (response.status === 400||response.status === 500) {\r\n    // setError(data.message)\r\n    toastmessage(\"error\",id,data.message );\r\n    }\r\n    else {\r\n      // localStorage.setItem(\"userInfo\",JSON.stringify(data));\r\n      toastmessage(\"success\",id,\"Registration Success\" );\r\n      navigate('/login');\r\n    }\r\n  }\r\ncatch(error){\r\n  toastmessage(\"success\",id,error);\r\n}}\r\n\r\n  const toastmessage = (variant, id, message) => {\r\n    toast.update(id, {\r\n      render: message, type: variant, isLoading: false,\r\n      position: \"top-right\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined\r\n    });\r\n  }\r\n  return (\r\n   <div>\r\n     <div className=\"ripple-background\">\r\n    <div className='full-screen'></div>\r\n      <div className='container centering vh-100 text-white pt-5 bg-transparent' >\r\n        <div className='card shadow p-3 mb-5 darkbg rounded'>\r\n          <div className='card-body p-5 '>\r\n       {error&& <ErrorMessage variant=\"danger\">{error}</ErrorMessage>}\r\n        {loading&&<Loading/>}\r\n      <Form onSubmit={postData}>\r\n        <Form.Group className=\" mb-3\" controlId=\"formBasicName\">\r\n          <Form.Label>Name</Form.Label>\r\n          <Form.Control type=\"text\" className=' input-style ' placeholder=\"Enter Name\"\r\n            name=\"name\"\r\n            value={user.name}\r\n            onChange={handleInputs}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control type=\"email\"  className=' input-style ' placeholder=\"Enter email\"\r\n            name=\"email\"\r\n            value={user.email}\r\n            onChange={handleInputs}\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            We'll never share your email with anyone else.\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control type=\"password\"   className=' input-style ' placeholder=\"Password\"\r\n            name=\"password\"\r\n            value={user.password}\r\n            onChange={handleInputs}\r\n          />\r\n        </Form.Group>\r\n  \r\n        <Button variant=\"primary\" type=\"submit\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      <Row className=\"py-3 ml-3\">Already Registered? <Link to=\"/Login\">Login Here</Link>\r\n      </Row>\r\n    </div>\r\n    <ToastContainer theme='colored' />\r\n    </div></div></div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RegisterScreen","import React from 'react'\r\nimport {\r\n    LineChart,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    Legend,\r\n    ResponsiveContainer,\r\n    AreaChart,\r\n    Area,\r\n    BarChart,\r\n    Bar\r\n} from 'recharts';\r\nimport { DateRangePicker, Nav, Placeholder } from 'rsuite';\r\nimport \"rsuite/dist/rsuite.css\";\r\nimport PlaceholderGraph from 'rsuite/esm/Placeholder/PlaceholderGraph';\r\nimport AllWeatherDataLinks from './AllWeatherDataLinks';\r\nconst FiveDaysForecast = () => {\r\n    const [forecastData, setForecastData] = React.useState([]);\r\n    const [active, setActive] = React.useState('home');\r\n    React.useEffect(() => {\r\n        getWeatherData();\r\n    }, []);\r\n    const apikey = \"7436a3b54d0b0bb376d8185b1fbe2aa9\";\r\n    const getWeatherData = async () => {\r\n        try {\r\n            const url1 = `https://api.agromonitoring.com/agro/1.0/weather/history?lat=37.75&lon=-122.37&start=1620136623&end=1621864623&appid=${apikey}`\r\n            const url=`https://api.agromonitoring.com/agro/1.0/weather/forecast?lat=35&lon=139&appid=${apikey}`\r\n            const soilurl = 'http://api.agromonitoring.com/agro/1.0/soil?'\r\n\r\n            const response = await fetch(url);\r\n            const data = await response.json();\r\n            console.log(data);\r\n            setForecastData(data);\r\n\r\n\r\n        }\r\n        catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n\r\n\r\n\r\n//         var dateTime = new Date(1620136623);\r\n// dateTime.toISOString();\r\n\r\n    };\r\n    const styles = {\r\n        marginBottom: 50,\r\n      };\r\n      \r\n      const CustomNav = ({ active, onSelect, ...props }) => {\r\n        return (\r\n          <Nav {...props} activeKey={active} onSelect={onSelect} style={styles}>\r\n            <Nav.Item eventKey=\"home\">\r\n              Home\r\n            </Nav.Item>\r\n            <Nav.Item  eventKey=\"news\">News</Nav.Item>\r\n            <Nav.Item eventKey=\"solutions\">Solutions</Nav.Item>\r\n            <Nav.Item eventKey=\"products\">Products</Nav.Item>\r\n            <Nav.Item eventKey=\"about\">About</Nav.Item>\r\n          </Nav>\r\n        );\r\n      };\r\n\r\n    return (\r\n        <div>\r\n              <div>\r\n           \r\n            {/* <CustomNav appearance=\"tabs\" active={active} onSelect={setActive} /> */}\r\n            \r\n           \r\n          </div>\r\n           <AllWeatherDataLinks/>\r\n           \r\n         \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FiveDaysForecast\r\n","import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nconst About = () => {\r\n  let navigate=useNavigate();\r\n  React.useEffect(() => {\r\n   navigate(\"/weather\");\r\n  }, [])\r\n  \r\n    return (\r\n        <div>\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About\r\n","import { IconButton, Input, Table } from 'rsuite';\r\nimport { Column, Cell, HeaderCell, ColumnGroup} from 'rsuite-table';\r\nimport React from 'react'\r\nimport Navbar from './Navbar';\r\n\r\n const rowKey = 'id';\r\n const ExpandCell = ({ rowData, dataKey, expandedRowKeys, onChange, ...props }) => (\r\n   <Cell {...props}>\r\n     <IconButton\r\n       size=\"xs\"\r\n       appearance=\"subtle\"\r\n       onClick={() => {\r\n         onChange(rowData);\r\n       }}\r\n       icon={\r\n         expandedRowKeys.some((key) => key === rowData[rowKey]) ? <button><i class=\"fa-solid fa-square-minus darkbg\"></i></button> :<button><i class=\"fa-solid fa-square-plus bluebg\"></i></button>\r\n       }\r\n     />\r\n   </Cell>\r\n );\r\n \r\n const renderRowExpanded = (rowData) => {\r\n     console.log(rowData)\r\n   return (\r\n     <div>\r\n       \r\n       <p>{rowData.note}</p>\r\n       <p>{rowData.created_on}</p>\r\n     </div>\r\n   );\r\n };\r\n \r\n const Farmnotes = () => {\r\n   \r\n   const [expandedRowKeys, setExpandedRowKeys] = React.useState([]);\r\n   const [note, setNote] = React.useState('');\r\n   const [noteData, setNoteData] = React.useState([]);\r\n   const data = noteData;\r\n   React.useEffect(() => {\r\n   getNotes();\r\n }, []);\r\n const getNotes=async()=>{\r\n    try {\r\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        const {_id} = userInfo;\r\n        console.log(_id);\r\n          const response = await fetch(`/api/users/${_id}`, {\r\n            method: 'GET',\r\n            headers: {\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json'\r\n            },\r\n          })\r\n          const data = await response.json();\r\n          console.log(data);\r\n          if (response.status == 400 || response.status == 500) { \r\n          }\r\n          console.log(data);\r\n          setNoteData(data.notes);\r\n      }\r\n      catch (error) {\r\n      console.log(error);\r\n      }  \r\n     };\r\n   const handleExpanded = (rowData, dataKey) => {\r\n     let open = false;\r\n     const nextExpandedRowKeys = [];\r\n\r\n \r\n     expandedRowKeys.forEach((key) => {\r\n       if (key === rowData[rowKey]) {\r\n         open = true;\r\n       } else {\r\n         nextExpandedRowKeys.push(key);\r\n       }\r\n     });\r\n \r\n     if (!open) {\r\n       nextExpandedRowKeys.push(rowData[rowKey]);\r\n     }\r\n \r\n     setExpandedRowKeys(nextExpandedRowKeys);\r\n   };\r\n \r\n   const userLogin = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      var addnote = {\r\n        \"note\":note,\r\n        \"created_on\": new Date().toString().substr(4, 12)\r\n      };\r\n      if(note){\r\n      console.log(addnote);\r\n      const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n      const { _id } = userInfo;\r\n      console.log(_id);\r\n        const response = await fetch(`/api/users/${_id}/${addnote}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ _id, addnote })\r\n        })\r\n        const data = await response.json();\r\n        if (response.status == 400 || response.status == 500) {\r\n         \r\n        }\r\n        console.log(data);\r\n        setNoteData(data.notes);\r\n        setNote(\"\");\r\n    }}\r\n    catch (error) {\r\n    console.log(error);\r\n    }  \r\n   }\r\n   return (\r\n       <div className='container-fluid vh-100'>\r\n         <Navbar/>\r\n           <div className='m-3 darkbg px-3 py-5'>\r\n           <textarea type=\"textarea\" className=\"txtarea\" rows={3} placeholder=\"Add Note\" \r\n            value={note}\r\n            onChange={(e) => setNote(e.target.value)}/>\r\n            <div className='text-center m-2'><button className='btn btn-primary' onClick={userLogin}>Add Note <i class=\"fa-solid fa-plus\"></i></button></div>\r\n           </div>\r\n           <div>\r\n     <Table\r\n     \r\n      className=\"rs-theme-dark text-white\"\r\n       height={420}\r\n       data={data}\r\n       rowKey={rowKey}\r\n       expandedRowKeys={expandedRowKeys}\r\n       onRowClick={(data) => {\r\n         console.log(data);\r\n       }}\r\n       renderRowExpanded={renderRowExpanded}\r\n     >\r\n       <Column flexGrow={1} align=\"center\">\r\n         <HeaderCell>#</HeaderCell>\r\n         <ExpandCell dataKey=\"id\" expandedRowKeys={expandedRowKeys} onChange={handleExpanded} />\r\n       </Column>\r\n \r\n       <Column flexGrow={2}>\r\n         <HeaderCell>Notes</HeaderCell>\r\n         <Cell dataKey=\"note\" />\r\n       </Column>\r\n       <Column flexGrow={2}>\r\n         <HeaderCell>Created on</HeaderCell>\r\n         <Cell dataKey=\"created_on\" />\r\n       </Column>\r\n     </Table>\r\n     </div></div>\r\n   );\r\n };\r\n \r\nexport default Farmnotes;","import React from 'react'\r\nimport img1 from '../assets/img1.png';\r\nimport img2 from '../assets/img2.png';\r\nimport img3 from '../assets/img3.png';\r\nimport Navbar from './Navbar';\r\n\r\nconst Information = () => {\r\n\r\n  return (\r\n    <>\r\n    <Navbar/>\r\n    {/* <div id=\"carouselExampleCaptions\" class=\"carousel slide\" data-bs-ride=\"carousel\">\r\n  <div class=\"carousel-indicators\">\r\n    <button type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide-to=\"0\" class=\"active\" aria-current=\"true\" aria-label=\"Slide 1\"></button>\r\n    <button type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide-to=\"1\" aria-label=\"Slide 2\"></button>\r\n    <button type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide-to=\"2\" aria-label=\"Slide 3\"></button>\r\n  </div>\r\n  <div class=\"carousel-inner\">\r\n    <div class=\"carousel-item active\">\r\n      <img src={img1} class=\"d-block w-100\" alt=\"...\"/>\r\n      <div class=\"carousel-caption d-none d-md-block\">\r\n        <h5>First slide label</h5>\r\n        <p>Some representative placeholder content for the first slide.</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"carousel-item\">\r\n      <img src={img2} class=\"d-block w-100\" alt=\"...\"/>\r\n      <div class=\"carousel-caption d-none d-md-block\">\r\n        <h5>Second slide label</h5>\r\n        <p>Some representative placeholder content for the second slide.</p>\r\n      </div>\r\n    </div>\r\n    <div class=\"carousel-item\">\r\n      <img src={img3} class=\"d-block w-100\" alt=\"...\"/>\r\n      <div class=\"carousel-caption d-none d-md-block\">\r\n        <h5>Third slide label</h5>\r\n        <p>Some representative placeholder content for the third slide.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide=\"prev\">\r\n    <span class=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"visually-hidden\">Previous</span>\r\n  </button>\r\n  <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleCaptions\" data-bs-slide=\"next\">\r\n    <span class=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n    <span class=\"visually-hidden\">Next</span>\r\n  </button>\r\n</div> */}\r\n\r\n    <div className='container darkbg text-white lildepth'>\r\n      \r\n      <div className='info-head lead my-2'>What is Remote Farming? </div>\r\n      It is defined as monitoring and managing of farm remotely through the application of Internet, with less/ without direct human intervention.\r\n      It is a phenomenon that has numerous applications including photography, surveying, geology, forestry and many more.\r\n      But it is in the field of agriculture that remote sensing has found significant use. There are very many applications of remote sensing in the agricultural sector.<br/>\r\n      Below is a summary of these applications<hr />\r\n      </div>\r\n      <div className='container darkbg text-white lildepth'>\r\n      1.    Crop production forecasting: Remote sensing is used to forecast the expected crop production and yield over a given area and determine how much of the crop will be harvested under specific conditions. Researchers can be able to predict the quantity of crop that will be produced in a given farmland over a given period of time.\r\n<hr/>\r\n      2.    Assessment of crop damage and crop progress: In the event of crop damage or crop progress, remote sensing technology can be used to penetrate the farmland and determine exactly how much of a given crop has been damaged and the progress of the remaining crop in the farm.\r\n      <hr/>\r\n     \r\n     \r\n     \r\n      3.   Identification of planting and harvesting dates: Because of the predictive nature of the remote sensing technology, farmers can now use remote sensing to observe a variety of factors including the weather patterns and the soil types to predict the planting and harvesting seasons of each crop.\r\n      <hr/>\r\n     \r\n      \r\n      4.    Soil moisture estimation: Soil moisture can be difficult to measure without the help of remote sensing technology. Remote sensing gives the soil moisture data and helps in determining the quantity of moisture in the soil and hence the type of crop that can be grown in the soil.\r\n      <hr/>\r\n      5.    Irrigation monitoring and management: Remote sensing gives information on the moisture quantity of soils. This information is used to determine whether a particular soil is moisture deficient or not and helps in planning the irrigation needs of the soil.\r\n      <hr/>\r\n      6.    Soil mapping: Soil mapping is one of the most common yet most important uses of remote sensing. Through soil mapping, farmers are able to tell what soils are ideal for which crops and what soil require irrigation and which ones do not. This information helps in precision agriculture.\r\n      <hr/></div>\r\n      <div className='container darkbg text-white lildepth'><br/>\r\n      7.    Monitoring of droughts: Remote sensing technology is used to monitor the weather patterns including the drought patterns over a given area. The information can be used to predict the rainfall patterns of an area and also tell the time difference between the current rainfall and the next rainfall which helps to keep track of the drought.\r\n      <hr/>\r\n     \r\n      8.    Determination of water content of field crops: Apart from determining the soil moisture content, remote sensing also plays an important role in the estimation of the water content in the field crops.\r\n      <hr/>\r\n      9.    Crop yield forecasting: Remote sensing technology can give accurate estimates of the expected crop yield in a planting season using various crop information such as the crop quality, the moisture level in the soil and in the crop and the crop cover of the land. When all of this data is combined it gives almost accurate estimates of the crop yield.\r\n      <hr/>\r\n      \r\n      10.    Collection of past and current weather data: Remote sensing technology is ideal for collection and storing of past and current weather data which can be used for future decision making and prediction.\r\n      <hr/>\r\n     \r\n     \r\n      11.    Precision farming: Remote sensing has played a very vital role in precision agriculture. Precision agriculture has resulted in the cultivation of healthy crops that guarantees farmers optimum harvests over a given period of time.\r\n      <hr/>\r\n      12.    Climate change monitoring: Remote sensing technology is important in monitoring of climate change and keeping track of the climatic conditions which play an important role in the determination of what crops can be grown where.\r\n      <hr/>\r\n     \r\n      13.    Air moisture estimation: Remote sensing technology is used in the estimation of air moisture which determines the humidity of the area. The level of humidity determines the type of crops to be grown within the area.\r\n      <hr/></div>\r\n      <div className='container darkbg text-white lildepth'>\r\n      <div className=\"info-head lead my-4\">What is NDVI (Normalized Difference Vegetation Index)?</div>\r\n      In short ,Normalized Difference Vegetation Index (NDVI) quantifies vegetation by measuring the difference between near-infrared (which vegetation strongly reflects) and red light (which vegetation absorbs).\r\n      <br />\r\n      NDVI always ranges from -1 to +1. But there isn’t a distinct boundary for each type of land cover.\r\n\r\n      For example, when you have negative values, it’s highly likely that it’s water. On the other hand, if you have an NDVI value close to +1, there’s a high possibility that it’s dense green leaves. But when NDVI is close to zero, there aren’t green leaves and it could even be an urbanized area.\r\n\r\n      NDVI is the most common index that analysts use in remote sensing.\r\n      <br />\r\n      We see several sectors using NDVI. For example, in agriculture, farmers use NDVI for precision farming and to measure biomass.\r\n      When water limits vegetation growth, it has a lower relative NDVI and density of vegetation.<br/><br/></div>\r\n      <div className='container darkbg text-white lildepth'>\r\n      <div className=\"info-head lead my-4\">Advantages of remote Sensing in Agriculture</div>\r\n      Monitoring of vegetation cover: Remote sensing plays a vital role in the area of crop classification, crop acreage estimation, and yield assessment. Many research experiments were done using aerial photographs and digital image processing techniques. However, the field of remote sensing helps in reducing the amount of field data to be collected and improves the higher precision of estimates.\r\n<hr/>\r\n      Crop production forecasting: Remote sensing allows researchers and farmers to forecast the expected crop production over a given area and determine how much crop can be harvested under specific conditions. Researchers can also predict the quantity of crops in given farmland over a given period, depending on many factors including crop variety, water, and nutrient status of the field, influence by weeds, pest and disease infestation, weather parameters.\r\n      <hr/>\r\n      Assessment of crop condition, damage, and crop progress: Remote sensing can play an important role in agriculture by providing timely spectral information to assess the biophysical indicators of plant health. In the event of crop damage or crop progress, remote sensing technology is used to penetrate the farmland and determine precisely how much of a given crop has been damaged and the progress of the remaining crop on the farm.\r\n      <hr/>\r\n      Crop identification: Remote sensing has played an essential role in crop identification, especially when the crop under observation shows some mysterious characteristics. The collected crop data will is taken to labs where various aspects of the crop, including the crop culture, are studied.\r\n      <hr/>\r\n      Crop acreage estimation: Remote sensing has also played a vital role in estimating the farmland on which a crop has been planted. This is usually a cumbersome procedure if carried out manually because of the vast sizes of the lands being estimated.\r\n      <hr/>\r\n      Crop yield modelling and estimation: Remote sensing also allows farmers and experts to predict the expected crop yield from given farmland by estimating the crop’s quality and the extent of the farmland. This is then used to determine the overall expected yield of the crop.\r\n      <hr/>\r\n      </div>\r\n      <div className='container darkbg text-white lildepth'><br/>\r\n      Identification of pests and disease infestation: Remote sensing has become an essential tool for monitoring and quantifying crop stress due to biotic and abiotic factors. It plays a significant role in identifying pests in farmland and gives data on the right pests control mechanism to get rid of the pests and diseases on the farm.\r\n      <hr/>\r\n      Weed identification and management: Precision weed management technique helps in carrying out better weed management practices. Remote sensing, coupled with precision agriculture, is a promising technology in nowadays. Though, ground surveying methods for mapping site-specific information about weeds are very time–consuming and labor-intensive. However, image-based remote sensing has potential applications in weed detection for site-specific weed management.\r\n      <hr/>\r\n      Soil moisture estimation: Soil moisture can be difficult to measure without remote sensing. Using remote sensing, farmers can acquire the soil moisture data, helping them determine the quantity of moisture in the soil and the type of crop grown in the soil.\r\n      <hr/>\r\n      Soil mapping: Soil mapping is one of the most common yet most essential uses of remote sensing. Through soil mapping, farmers can tell which soils are ideal for which crops and which soil require irrigation, and which ones do not. This information helps in precision agriculture.\r\n      <hr/>\r\n      Monitoring of droughts: Remote sensing technology can monitor the weather pattern of a given area. It monitors drought patterns too. The data can be used to predict the rainfall patterns of an area and tell the time difference between the current rainfall and the next rainfall. This helps keep track of the drought.\r\n      <hr/>\r\n      Water resources mapping: Remote sensing is key in mapping water resources over farmland that can be used for agriculture. Through remote sensing, the farmers can tell where water resources are available for use on a given land and if they are adequate.\r\n<br/><br/>\r\n</div><br/>\r\n   \r\n    </>\r\n  )\r\n}\r\n\r\nexport default Information","export default __webpack_public_path__ + \"static/media/img1.ceb58290.png\";","export default __webpack_public_path__ + \"static/media/img2.9da4f0c0.png\";","export default __webpack_public_path__ + \"static/media/img3.a743ab6b.png\";","import React from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nconst NotFound = () => {\r\n    const navigate=useNavigate();\r\n  return (\r\n    <div className=' vh-100 container text-black text-center'>< h2 >Not Available Yet</h2>\r\n    <button className='btn btn-warning ' onClick={()=>{navigate(\"/\")}}>Go Back</button></div>\r\n  )\r\n}\r\n\r\nexport default NotFound","import Polygon from './component/Polygon';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ShowMap from './component/ShowMap';\nimport Weather from './component/Weather';\nimport Login from './component/loginss/Login';\nimport Register from './component/loginss/Register';\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport Navbar from './component/Navbar';\nimport Contact from './component/loginss/Contact';\nimport RegisterScreen from './component/loginss/RegisterScreen';\nimport FiveDaysForecast from './component/GraphicalData/FiveDaysForecast';\nimport Logins from './component/loginss/Logins';\nimport About from './component/loginss/About';\nimport Farmnotes from './component/Farmnotes';\nimport Information from './component/Information';\nimport NotFound from './component/NotFound';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"stylebg\">\n     <Routes>\n      <Route  exact path=\"/register\" element={<RegisterScreen/>}/>\n      <Route exact  path=\"/login\" element={<Login/>}/>\n         <Route  exact path=\"/\" element={<Weather/>}/>\n          <Route  exact path=\"/graph\" element={<FiveDaysForecast/>}/>\n          <Route  exact path=\"/map\" element={<ShowMap/>}/>\n          <Route exact  path=\"/create\" element={<Contact/>}/>\n          <Route  exact path=\"/notes\" element={<Farmnotes/>}/>\n          <Route  exact path=\"/info\" element={<Information/>}/>\n          <Route  exact path=\"/deleting\" element={<About/>}/>\n          <Route  exact path=\"/notfound\" element={<NotFound/>}/>\n         </Routes>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from 'react-router-dom';\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter><App/></BrowserRouter>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}